package com.mycompany.veterinaria.controller;import com.mycompany.veterinaria.model.Owner;import com.mycompany.veterinaria.service.IOwnerService;import jakarta.persistence.EntityNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("/vet-clinic/owner")public class OwnerController {    @Autowired    private IOwnerService ownerService;    @GetMapping("/get")    @ResponseStatus(HttpStatus.OK)    public List<Owner> getDuenhos (){        return  ownerService.getOwners();    }    @GetMapping("/get/one")    public ResponseEntity<?> findDuenho (@RequestParam Long idOwner){        try {            Owner owner = ownerService.findOneOwner(idOwner);            return  ResponseEntity.ok(owner);        }catch (EntityNotFoundException ex) {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());        }catch (RuntimeException ex){            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Server internal Error");        }    }    @PostMapping("/save")    @ResponseStatus(HttpStatus.CREATED)    public Owner saveDuenho (@RequestBody Owner owner){        return ownerService.saveOwner(owner);    }    @PutMapping ("/edit")    public  ResponseEntity<?>  editDuenho (@RequestBody Owner owner){        try{            ownerService.editOwner(owner);            return  ResponseEntity.ok("Owner successfully edited: " + ownerService.findOneOwner(owner.getIdOwner()));        }catch (EntityNotFoundException ex) {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());        }catch (Exception ex){            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Server internal Error");        }    }    @DeleteMapping("/delete")    public ResponseEntity<?> deleteDuenho (@RequestParam Long idDuenho){        try{            ownerService.deleteOwner(idDuenho);            return  ResponseEntity.ok("Owner successfully delete:");        }catch (EntityNotFoundException ex) {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());        }catch (Exception ex){            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Server internal Error");        }    }}