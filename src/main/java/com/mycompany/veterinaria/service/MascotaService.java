package com.mycompany.veterinaria.service;import com.mycompany.veterinaria.dto.MascotaDTO;import com.mycompany.veterinaria.model.Mascota;import com.mycompany.veterinaria.repository.IMascotaRepository;import jakarta.persistence.EntityNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;@Servicepublic class MascotaService implements IMascotaService{    @Autowired    IMascotaRepository mascotaRepository;    @Override    public Mascota saveMascota(Mascota mascota) {        return    mascotaRepository.save(mascota);    }    @Override    public void deleteMascota(Long idMascota) {        if(!mascotaRepository.existsById(idMascota)){            throw new EntityNotFoundException("Mascota no encontrada");        }        mascotaRepository.deleteById(idMascota);    }    @Override    public List<Mascota> getMascotas() {        List<Mascota> mascotaList = mascotaRepository.findAll();        return mascotaList;    }    @Override    public Mascota editMascota(Mascota mascota) {        Mascota resultPet = this.findOneMascota(mascota.getIdMascota());        resultPet.setNombreMascota(mascota.getNombreMascota());        resultPet.setEspecie(mascota.getEspecie());        resultPet.setRaza(mascota.getRaza());        resultPet.setColor(mascota.getColor());        Mascota mascotaSave = this.saveMascota(mascota);        return mascotaSave;    }    @Override    public Mascota findOneMascota(Long idMascota) {        Mascota mascotaReslt=   mascotaRepository.findById(idMascota)                .orElseThrow(()->new EntityNotFoundException("Due√±o no encontrado"));        return  mascotaReslt;    }    @Override    public List<MascotaDTO> findMascotaDTO() {        List<MascotaDTO> mascotaDTOS = new ArrayList<>();        List<Mascota> mascotaList = this.getMascotas();        MascotaDTO mascotaDTO = new MascotaDTO();        for (Mascota mascota : mascotaList) {            mascotaDTO.setNombreMascota(mascota.getNombreMascota());            mascotaDTO.setEspecie(mascota.getEspecie());            mascotaDTO.setRaza(mascota.getRaza());            mascotaDTO.setNombreDuenho(mascota.getDuenho().getNombreDuenho());            mascotaDTO.setApellidoDuenho(mascota.getDuenho().getApellidoDuenho());            mascotaDTOS.add(mascotaDTO);             mascotaDTO = new MascotaDTO(); //Reset        }        return mascotaDTOS;    }    @Override    public List<Mascota> getPerro() {        String especie = "Perro";        String raza = "Schnauzer";        List<Mascota> mascotasList = new ArrayList<>();        for (Mascota mascota : this.getMascotas()) {            if (mascota.getEspecie().equalsIgnoreCase(especie) &&                    mascota.getRaza().equalsIgnoreCase(raza)) {                mascotasList.add(mascota);            }        }        return mascotasList;    }}